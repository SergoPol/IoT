#include <Arduino.h>
#include <driver/i2s.h>   // For I2S microphone
#include <FastLED.h>      // For WS2812B LEDs
#include <WiFi.h>         // For WiFi connectivity
#include <WebServer.h>    // For HTTP server (both modes)
#include <DNSServer.h>    // For Captive Portal DNS
#include <Preferences.h>  // For saving WiFi credentials
#include <ArduinoJson.h>  // For parsing settings from JSON
#include <ESPmDNS.h>      // For .local domain resolution

// =============================================================================
// --- User Configuration ---
// =============================================================================

// --- WiFi Access Point Mode (for initial setup) ---
const char* AP_SSID = "MusicLEDs-Setup"; // Name of the WiFi network the ESP32 creates
const char* AP_PASSWORD = "password123"; // Password for the setup network (min 8 chars, or NULL for open)

// --- LED Strip Configuration ---
#define NUM_LEDS 36        // Number of LEDs in your strip
#define LED_PIN GPIO_NUM_21 // GPIO pin connected to the Data In (DI) of the LED strip
#define LED_TYPE WS2812B   // Type of LED strip
#define COLOR_ORDER GRB    // Color order of the strip (GRB, RGB, BRG, etc.)

// --- I2S Microphone Configuration ---
#define SAMPLE_BUFFER_SIZE 256     // I2S buffer size (samples)
#define SAMPLE_RATE 16000          // Sample rate in Hz (e.g., 8000, 16000, 44100)
#define I2S_MIC_CHANNEL I2S_CHANNEL_FMT_ONLY_LEFT // Use left channel (tie L/R pin to GND on INMP441)
#define I2S_MIC_SERIAL_CLOCK GPIO_NUM_37    // SCK / BCK pin
#define I2S_MIC_LEFT_RIGHT_CLOCK GPIO_NUM_39 // WS / LRC pin
#define I2S_MIC_SERIAL_DATA GPIO_NUM_40     // SD / DOUT pin

// --- Audio Processing & Effects Configuration ---
#define NOISE_FLOOR 10000      // Base noise floor threshold (tune based on your microphone)
#define UPDATES_PER_SECOND 60 // Target frame rate for LED updates in RUNNING mode

// =============================================================================
// --- System Variables & Objects ---
// =============================================================================

Preferences preferences;
const char* WIFI_PREFS_NAMESPACE = "wifi-creds";
const char* WIFI_SSID_KEY = "ssid";
const char* WIFI_PASS_KEY = "password";

WebServer server(80);
WebServer configServer(80);
DNSServer dnsServer;
const byte DNS_PORT = 53;

enum OperatingMode {
    MODE_WIFI_CONFIG,
    MODE_RUNNING
};
OperatingMode currentOperatingMode = MODE_WIFI_CONFIG;

struct SettingsVu {
    int sensitivity = 70; int brightness = 80; CRGB bgColor = CRGB::Black;
    int bgBrightness = 10; int smoothing = 30;
};
struct SettingsFlash {
    int sensitivity = 80; CRGB flashColor = CRGB::White; int brightness = 100;
    int smoothing = 10;
};

volatile int current_mode = 0;
const int num_modes = 3;
SettingsVu settingsVuGreenRed;
SettingsVu settingsVuRainbow;
SettingsFlash settingsFlash;

float current_smoothing_factor = 0.3; float current_sensitivity_coef = 1.0;
long current_flash_threshold = 800000; uint8_t current_bg_brightness_val = 25;
uint8_t current_main_brightness_val = 150;

CRGB leds[NUM_LEDS];
int32_t raw_samples[SAMPLE_BUFFER_SIZE];
float smoothed_volume_f = 0; float averageLevel = 10000; uint8_t vu_hue = 0;

DEFINE_GRADIENT_PALETTE(soundlevel_gp) {
    0,   0, 255,   0, 96, 255, 255,   0, 160, 255, 100,   0, 255, 255,   0,   0
};
CRGBPalette16 myPal = soundlevel_gp;

i2s_config_t i2s_config = {
    .mode = (i2s_mode_t)(I2S_MODE_MASTER | I2S_MODE_RX), .sample_rate = SAMPLE_RATE,
    .bits_per_sample = I2S_BITS_PER_SAMPLE_32BIT, .channel_format = I2S_MIC_CHANNEL,
    .communication_format = I2S_COMM_FORMAT_STAND_I2S, .intr_alloc_flags = ESP_INTR_FLAG_LEVEL1,
    .dma_buf_count = 4, .dma_buf_len = SAMPLE_BUFFER_SIZE, .use_apll = false,
    .tx_desc_auto_clear = false, .fixed_mclk = 0
};
i2s_pin_config_t i2s_mic_pins = {
    .bck_io_num = I2S_MIC_SERIAL_CLOCK, .ws_io_num = I2S_MIC_LEFT_RIGHT_CLOCK,
    .data_out_num = I2S_PIN_NO_CHANGE, .data_in_num = I2S_MIC_SERIAL_DATA
};

// Flag to ensure I2S is only installed once needed
bool i2s_initialized = false;

// =============================================================================
// --- Helper Functions ---
// =============================================================================
CRGB hexToCRGB(String hex) {
  if (hex.startsWith("#")) hex = hex.substring(1);
  if (hex.length() != 6) return CRGB::Black;
  long number = strtol(hex.c_str(), NULL, 16);
  return CRGB((number >> 16) & 0xFF, (number >> 8) & 0xFF, number & 0xFF);
}

void updateCalculatedParams() {
    int sensitivityPercent = 0, brightnessPercent = 0, smoothingPercent = 0, bgBrightnessPercent = 0;
    CRGB bgColor = CRGB::Black; // Default background

    // Load settings based on the current mode
    if (current_mode == 0) { // VU Green-Red
        sensitivityPercent = settingsVuGreenRed.sensitivity; brightnessPercent = settingsVuGreenRed.brightness;
        smoothingPercent = settingsVuGreenRed.smoothing; bgBrightnessPercent = settingsVuGreenRed.bgBrightness;
        bgColor = settingsVuGreenRed.bgColor;
        current_sensitivity_coef = max(0.5f, map(sensitivityPercent, 0, 100, 300, 50) / 100.0f);
    } else if (current_mode == 1) { // VU Rainbow
        sensitivityPercent = settingsVuRainbow.sensitivity; brightnessPercent = settingsVuRainbow.brightness;
        smoothingPercent = settingsVuRainbow.smoothing; bgBrightnessPercent = settingsVuRainbow.bgBrightness;
        bgColor = settingsVuRainbow.bgColor;
        current_sensitivity_coef = max(0.5f, map(sensitivityPercent, 0, 100, 300, 50) / 100.0f);
    } else { // Flash on Peak
        sensitivityPercent = settingsFlash.sensitivity; brightnessPercent = settingsFlash.brightness;
        smoothingPercent = settingsFlash.smoothing;
        current_flash_threshold = map(sensitivityPercent, 0, 100, 2000000, 50000); // Tune these limits
    }

    current_smoothing_factor = constrain(map(smoothingPercent, 0, 100, 95, 5) / 100.0f, 0.05f, 0.95f); // Higher % = smoother (lower factor)
    current_main_brightness_val = map(brightnessPercent, 0, 100, 0, 255);
    // Background brightness is relative to main brightness
    current_bg_brightness_val = map(bgBrightnessPercent, 0, 100, 0, current_main_brightness_val);
    FastLED.setBrightness(current_main_brightness_val);
}

// =============================================================================
// --- I2S & Audio Functions ---
// =============================================================================
void ensure_i2s_initialized() {
    if (!i2s_initialized) {
        Serial.println("- Initializing I2S driver and pins...");
        i2s_install();
        i2s_set_pin();
        i2s_zero_dma_buffer(I2S_NUM_0);
        i2s_initialized = true;
        Serial.println("- I2S Initialized.");
    }
}

void i2s_install() {
  esp_err_t err = i2s_driver_install(I2S_NUM_0, &i2s_config, 0, NULL);
  if (err != ESP_OK) {
    Serial.printf("Failed installing I2S driver: %d\n", err);
    // Consider disabling effects if I2S fails permanently
  }
}

void i2s_set_pin() {
  esp_err_t err = i2s_set_pin(I2S_NUM_0, &i2s_mic_pins);
  if (err != ESP_OK) {
    Serial.printf("Failed setting I2S pins: %d\n", err);
  }
}

long get_peak_volume() {
  if (!i2s_initialized) return 0; // Don't read if not ready

  size_t bytes_read = 0;
  esp_err_t result = i2s_read(I2S_NUM_0, raw_samples, sizeof(int32_t) * SAMPLE_BUFFER_SIZE, &bytes_read, pdMS_TO_TICKS(100)); // 100ms timeout

  long peak_raw = 0;
  if (result == ESP_OK && bytes_read > 0) {
    int samples_read = bytes_read / sizeof(int32_t);
    for (int i = 0; i < samples_read; i++) {
      long current_abs = abs(raw_samples[i]);
      if (current_abs > peak_raw) peak_raw = current_abs;
    }
  } else if (result != ESP_OK && result != ESP_ERR_TIMEOUT) { // Log errors other than timeout
      static unsigned long last_i2s_error_time = 0;
      if (millis() - last_i2s_error_time > 5000) {
          Serial.printf("I2S read error: %d\n", result);
          last_i2s_error_time = millis();
      }
      return 0; // Return 0 on error
  } else if (result == ESP_ERR_TIMEOUT) {
      // Optionally handle timeout (e.g., means no data received)
      return 0;
  }
  return peak_raw;
}

// =============================================================================
// --- WiFi Configuration Mode Functions ---
// =============================================================================
const char* WIFI_CONFIG_HTML = R"rawliteral(
<!DOCTYPE HTML><html><head>
<title>Music LEDs WiFi Setup</title>
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta charset="UTF-8">
<style>
  body { font-family: Arial, sans-serif; background-color: #f0f0f0; padding: 20px; margin: 0;}
  .container { background-color: #fff; padding: 20px 30px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); max-width: 400px; margin: 30px auto; }
  h1 { color: #333; text-align: center; margin-top: 0; margin-bottom: 20px; }
  label { display: block; margin-bottom: 8px; font-weight: bold; color: #555; }
  input[type=text], input[type=password] { width: calc(100% - 22px); padding: 10px; margin-bottom: 20px; border: 1px solid #ccc; border-radius: 4px; font-size: 1em;}
  input[type=submit] { background-color: #007bff; color: white; padding: 12px 20px; border: none; border-radius: 4px; cursor: pointer; width: 100%; font-size: 16px; }
  input[type=submit]:hover { background-color: #0056b3; }
  .note { font-size: 0.9em; color: #777; text-align: center; margin-top: 15px; }
</style></head><body>
<div class="container">
  <h1>WiFi Setup</h1>
  <form method='POST' action='/save'>
    <label for='ssid'>Network Name (SSID):</label>
    <input type='text' id='ssid' name='ssid' required><br>
    <label for='pass'>Password:</label>
    <input type='password' id='pass' name='pass'><br>
    <input type='submit' value='Save & Connect'>
  </form>
  <p class="note">Enter your WiFi network details. The device will restart and try to connect.</p>
</div></body></html>
)rawliteral";

// Original definition of handleWifiConfigRoot
void handleWifiConfigRoot() {
  configServer.sendHeader("Cache-Control", "no-cache, no-store, must-revalidate");
  configServer.sendHeader("Pragma", "no-cache");
  configServer.sendHeader("Expires", "-1");
  configServer.send(200, "text/html", WIFI_CONFIG_HTML);
}

// Original definition of handleWifiSave
void handleWifiSave() {
  Serial.println("WiFi save request received");
  String ssid = configServer.arg("ssid");
  String password = configServer.arg("pass");
  if (ssid.length() == 0) { configServer.send(400, "text/plain", "SSID cannot be empty"); return; }
  Serial.println("Saving WiFi credentials..."); Serial.print("SSID: "); Serial.println(ssid);
  preferences.begin(WIFI_PREFS_NAMESPACE, false);
  preferences.putString(WIFI_SSID_KEY, ssid); preferences.putString(WIFI_PASS_KEY, password);
  preferences.end();
  Serial.println("Credentials saved.");
  String successHtml = R"rawliteral(
    <!DOCTYPE HTML><html><head><title>WiFi Saved</title><meta charset="UTF-8"><style>body{font-family:sans-serif;text-align:center;padding-top:50px;}</style></head>
    <body><h1>Settings Saved!</h1><p>The device will now restart and attempt to connect to your network: <strong>%SSID%</strong></p><p>Please reconnect your phone/computer to your regular WiFi network.</p></body></html>)rawliteral";
  successHtml.replace("%SSID%", ssid);
  configServer.send(200, "text/html", successHtml);
  delay(1500);
  Serial.println("Restarting device..."); ESP.restart();
}

// Original definition of handleCaptivePortal
void handleCaptivePortal() {
  Serial.println("Captive portal request redirected.");
  configServer.sendHeader("Location", "http://" + WiFi.softAPIP().toString() + "/", true);
  configServer.send(302, "text/plain", "");
}

void startAPMode() {
  Serial.println("Starting AP Mode for WiFi Configuration...");
  FastLED.clearData();
  fill_solid(leds, 1, CRGB::Blue); // First LED blue indicator
  FastLED.setBrightness(50);
  FastLED.show();

  WiFi.disconnect();
  WiFi.mode(WIFI_AP);
  // Try channel 6
  bool apConfigured = WiFi.softAP(AP_SSID, AP_PASSWORD, 6);

  if (!apConfigured) {
      Serial.println("!!! Failed to start Soft AP! Halting.");
      while(true) delay(1000);
  }
  IPAddress apIP = WiFi.softAPIP();
  Serial.print("AP IP address: "); Serial.println(apIP);

  dnsServer.setErrorReplyCode(DNSReplyCode::NoError);
  dnsServer.start(DNS_PORT, "*", apIP);
  Serial.println("DNS server started.");

  configServer.on("/", HTTP_GET, handleWifiConfigRoot);
  configServer.on("/save", HTTP_POST, handleWifiSave);
  configServer.on("/generate_204", HTTP_GET, handleWifiConfigRoot);
  configServer.on("/fwlink", HTTP_GET, handleWifiConfigRoot);
  configServer.on("/hotspot-detect.html", HTTP_GET, handleWifiConfigRoot);
  configServer.onNotFound(handleCaptivePortal); // Use handleCaptivePortal for not found in AP mode
  configServer.begin();
  Serial.println("Configuration server started.");

  currentOperatingMode = MODE_WIFI_CONFIG;
}

// =============================================================================
// --- Running Mode Functions (STA Mode) ---
// =============================================================================

// Original definition of handleSettings
void handleSettings() {
  if (server.method() != HTTP_POST) { server.send(405, "text/plain", "Method Not Allowed"); return; }
  if (!server.hasArg("plain")) { server.send(400, "application/json", "{\"status\":\"error\", \"message\":\"Missing body\"}"); return; }
  String body = server.arg("plain");
  StaticJsonDocument<1024> doc;
  DeserializationError error = deserializeJson(doc, body);
  if (error) { Serial.print(F("deserializeJson() failed: ")); Serial.println(error.f_str()); server.send(400, "application/json", "{\"status\":\"error\", \"message\":\"Invalid JSON\"}"); return; }
  bool settings_updated = false;
  if (doc.containsKey("mode")) {
      int new_mode = doc["mode"];
      if (new_mode >= 0 && new_mode < num_modes && new_mode != current_mode) { current_mode = new_mode; settings_updated = true; Serial.printf("Mode set to: %d\n", current_mode); smoothed_volume_f = 0; averageLevel = 10000; }
  }
  if (doc.containsKey("vu_green_red")) {
      JsonObject vu = doc["vu_green_red"];
      if (vu.containsKey("sensitivity")) settingsVuGreenRed.sensitivity = constrain(vu["sensitivity"].as<int>(), 0, 100);
      if (vu.containsKey("brightness")) settingsVuGreenRed.brightness = constrain(vu["brightness"].as<int>(), 0, 100);
      if (vu.containsKey("bgColor")) settingsVuGreenRed.bgColor = hexToCRGB(vu["bgColor"].as<String>());
      if (vu.containsKey("bgBrightness")) settingsVuGreenRed.bgBrightness = constrain(vu["bgBrightness"].as<int>(), 0, 100);
      if (vu.containsKey("smoothing")) settingsVuGreenRed.smoothing = constrain(vu["smoothing"].as<int>(), 0, 100);
      settings_updated = true;
  }
  if (doc.containsKey("vu_rainbow")) {
      JsonObject vu = doc["vu_rainbow"];
      if (vu.containsKey("sensitivity")) settingsVuRainbow.sensitivity = constrain(vu["sensitivity"].as<int>(), 0, 100);
      if (vu.containsKey("brightness")) settingsVuRainbow.brightness = constrain(vu["brightness"].as<int>(), 0, 100);
      if (vu.containsKey("bgColor")) settingsVuRainbow.bgColor = hexToCRGB(vu["bgColor"].as<String>());
      if (vu.containsKey("bgBrightness")) settingsVuRainbow.bgBrightness = constrain(vu["bgBrightness"].as<int>(), 0, 100);
      if (vu.containsKey("smoothing")) settingsVuRainbow.smoothing = constrain(vu["smoothing"].as<int>(), 0, 100);
       settings_updated = true;
  }
  if (doc.containsKey("flash")) {
      JsonObject fl = doc["flash"];
      if (fl.containsKey("sensitivity")) settingsFlash.sensitivity = constrain(fl["sensitivity"].as<int>(), 0, 100);
      if (fl.containsKey("color")) settingsFlash.flashColor = hexToCRGB(fl["color"].as<String>());
      if (fl.containsKey("brightness")) settingsFlash.brightness = constrain(fl["brightness"].as<int>(), 0, 100);
      if (fl.containsKey("smoothing")) settingsFlash.smoothing = constrain(fl["smoothing"].as<int>(), 0, 100);
      settings_updated = true;
  }
  if (settings_updated) { updateCalculatedParams(); server.send(200, "application/json", "{\"status\":\"ok\"}"); Serial.println("Settings updated via HTTP");
  } else { server.send(200, "application/json", "{\"status\":\"no_change\"}"); }
}

// Original definition of handleRoot
void handleRoot() {
  String html = "<h1>Music LED Controller</h1><p>Mode: " + String(current_mode) + "</p><p>Status: Running</p><p>Use POST /settings with JSON data to control.</p>";
  server.send(200, "text/html", html);
}

// Original definition of handleNotFound
void handleNotFound() {
  // Note: This specific instance of handleNotFound is only called for the 'server' object in RUNNING mode.
  // The 'configServer' in AP mode uses handleCaptivePortal for its 'onNotFound'.
  server.send(404, "text/plain", "Not found");
}


void startSTAMode() {
  Serial.println("Starting Normal Operation Mode (STA)...");
  Serial.print("Connected to WiFi. IP address: "); Serial.println(WiFi.localIP());

  ensure_i2s_initialized();

  if (MDNS.begin("music-leds")) {
    Serial.println("MDNS responder started (music-leds.local)");
    MDNS.addService("http", "tcp", 80);
  } else { Serial.println("Error starting MDNS"); }

  server.on("/", HTTP_GET, handleRoot);
  server.on("/settings", HTTP_POST, handleSettings);
  server.onNotFound(handleNotFound); // Use the correct handler for the main server
  server.begin();
  Serial.println("Main HTTP server started.");

  updateCalculatedParams();
  currentOperatingMode = MODE_RUNNING;

  FastLED.setBrightness(current_main_brightness_val);
  FastLED.clearData();
  FastLED.show();
}

// =============================================================================
// --- LED Effect Rendering Functions ---
// =============================================================================
void vuMeterGreenRed(int level) {
  CRGB bgColor = settingsVuGreenRed.bgColor;
  bgColor.nscale8_video(current_bg_brightness_val);
  fill_solid(leds, NUM_LEDS, bgColor);
  int num_leds_lit = constrain(level, 0, NUM_LEDS);
  if (num_leds_lit == 0) { FastLED.show(); return; }
  int center = NUM_LEDS / 2; int half_width = num_leds_lit / 2;
  int start_led = center - half_width; int end_led = start_led + num_leds_lit;
  for (int i = start_led; i < end_led; i++) {
      if (i >= 0 && i < NUM_LEDS) {
          uint8_t palette_index = map(i - start_led, 0, num_leds_lit - 1, 0, 255);
          leds[i] = ColorFromPalette(myPal, palette_index);
      }
  }
  FastLED.show();
}

void vuMeterRainbow(int level) {
  CRGB bgColor = settingsVuRainbow.bgColor;
  bgColor.nscale8_video(current_bg_brightness_val);
  fill_solid(leds, NUM_LEDS, bgColor);
  int num_leds_lit = constrain(level, 0, NUM_LEDS);
   if (num_leds_lit == 0) { FastLED.show(); return; }
  int center = NUM_LEDS / 2; int half_width = num_leds_lit / 2;
  int start_led = center - half_width; int end_led = start_led + num_leds_lit;
  for (int i = start_led; i < end_led; i++) {
      if (i >= 0 && i < NUM_LEDS) {
          uint8_t hue_offset = map(i - start_led, 0, num_leds_lit - 1, 0, 128);
          leds[i] = CHSV(vu_hue + hue_offset, 255, 255);
      }
  }
  EVERY_N_MILLISECONDS(20) { vu_hue++; }
  FastLED.show();
}

void flashOnPeak(long peak_volume) {
  if (peak_volume > current_flash_threshold) {
      CRGB flashColorActual = settingsFlash.flashColor;
      uint8_t flashBrightVal = map(settingsFlash.brightness, 0, 100, 0, 255);
      flashColorActual.nscale8_video(flashBrightVal);
      fill_solid(leds, NUM_LEDS, flashColorActual);
  } else {
      uint8_t fadeRate = map(settingsFlash.smoothing, 0, 100, 80, 5);
      fadeToBlackBy(leds, NUM_LEDS, fadeRate);
  }
  FastLED.show();
}

// =============================================================================
// --- Arduino Setup ---
// =============================================================================
void setup() {
  Serial.begin(115200);
  Serial.println("\n\n===================================");
  Serial.println(" Music LED Controller Booting Up ");
  Serial.println("===================================");

  FastLED.addLeds<LED_TYPE, LED_PIN, COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalLEDStrip);
  FastLED.setBrightness(50);
  FastLED.clear();
  FastLED.show();
  Serial.println("- FastLED Initialized.");

  // I2S is NOT initialized here

  String saved_ssid = ""; String saved_pass = "";
  preferences.begin(WIFI_PREFS_NAMESPACE, true);
  saved_ssid = preferences.getString(WIFI_SSID_KEY, "");
  saved_pass = preferences.getString(WIFI_PASS_KEY, "");
  preferences.end();

  if (saved_ssid.length() > 0) {
    Serial.println("- Found saved WiFi credentials.");
    Serial.print("- Attempting to connect to SSID: "); Serial.println(saved_ssid);
    WiFi.mode(WIFI_STA);
    WiFi.begin(saved_ssid.c_str(), saved_pass.c_str());
    unsigned long startTime = millis(); bool connected = false;
    Serial.print("  Connecting");
    while (millis() - startTime < 15000) { // 15s timeout
      if (WiFi.status() == WL_CONNECTED) { connected = true; break; }
      delay(500); Serial.print(".");
    }
    Serial.println();
    if (connected) {
      Serial.println("  WiFi Connection Successful!");
      startSTAMode();
    } else {
      Serial.println("! Failed to connect to saved WiFi network within timeout.");
      WiFi.disconnect(true); delay(100);
      startAPMode();
    }
  } else {
    Serial.println("- No saved WiFi credentials found.");
    startAPMode();
  }
  Serial.println("--- Setup Complete ---");
}

// =============================================================================
// --- Arduino Loop ---
// =============================================================================
void loop() {
  if (currentOperatingMode == MODE_WIFI_CONFIG) {
    dnsServer.processNextRequest();
    configServer.handleClient();
    // Minimal delay, NO LED/I2S processing
    delay(10);
  } else { // MODE_RUNNING
    ensure_i2s_initialized(); // Make sure I2S is running
    server.handleClient();    // Handle main server requests

    long peak_volume_raw = get_peak_volume();

    if (current_mode == 0 || current_mode == 1) { // VU Modes
        float peak_volume_f = (float)peak_volume_raw;
        smoothed_volume_f = (peak_volume_f * (1.0 - current_smoothing_factor)) + (smoothed_volume_f * current_smoothing_factor);
        const float averK = 0.005;
        if (smoothed_volume_f > NOISE_FLOOR * 1.1) averageLevel = (smoothed_volume_f * averK) + (averageLevel * (1.0 - averK));
        if (averageLevel < NOISE_FLOOR * 1.5) averageLevel = NOISE_FLOOR * 1.5;
        float maxLevel = averageLevel * current_sensitivity_coef;
        if (maxLevel < NOISE_FLOOR * 1.2) maxLevel = NOISE_FLOOR * 1.2;
        int num_leds_to_light = 0;
        if (smoothed_volume_f > NOISE_FLOOR) {
            float display_volume = smoothed_volume_f - NOISE_FLOOR;
            float dynamic_max_display = maxLevel - NOISE_FLOOR;
            if (dynamic_max_display <= 0) dynamic_max_display = 1;
            num_leds_to_light = map(display_volume, 0, dynamic_max_display, 0, NUM_LEDS);
        }
        num_leds_to_light = constrain(num_leds_to_light, 0, NUM_LEDS);
        if (current_mode == 0) vuMeterGreenRed(num_leds_to_light);
        else vuMeterRainbow(num_leds_to_light);
    } else { // Flash Mode
        flashOnPeak(peak_volume_raw);
    }
    // LED update is handled inside effect functions now
    delay(1); // Small yield
  } // End MODE_RUNNING
} // End loop